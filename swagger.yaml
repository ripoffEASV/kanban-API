openapi: 3.0.0
info:
  title: MEN REST API
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
    description: Localhost development server
components:
  securitySchemes:
    securitySchemes:
      bearerAuth: # arbitrary name for the security scheme
    type: http
    scheme: bearer
    bearerFormat: JWT

  schemas:
    OrganizationModel:
      type: object
      properties:
        orgName:
          type: string
          example: "Acme Corp"
        createdByID:
          type: string
          example: "MongoDBObjectID"
        ownerID:
          type: string
          example: "MongoDBObjectID"
        orgMembers:
          type: array
          example: '["MongoDBObjectID", "MongoDBObjectID"]'
        projectIDs:
          type: array
          example: '["MongoDBObjectID", "MongoDBObjectID"]'
        inviteArray:
          type: array
          example: '["MongoDBObjectID", "MongoDBObjectID"]'

    ProjectModel:
      type: object
      properties:
        projectName:
          type: string
          example: "Acme Corp Project"
        projectStateIDs:
          type: array
          example: '["MongoDBObjectID", "MongoDBObjectID"]'
        members:
          type: array
          example: '["MongoDBObjectID", "MongoDBObjectID"]'
        orgID:
          type: string
          example: "MongoDBObjectID"

    StateModel:
      type: object
      properties:
        stateName:
          type: string
          exmaple: "Todo"
        position:
          type: number
          example: "0 - where lower position equals what is shown first"

    TaskModel:
      type: object
      properties:
        stateID:
          type: string
          example: "MongoDBObjectID"
        taskTitle:
          type: string
          example: "Create login button design"
        taskDescription:
          type: string
          example: "Create login button design, which fulfills the following criteria: - Responsive, - clear contrast and readable, - follow company design methods"
        hoursExpected:
          type: string
          example: "12h"
        hoursSpent:
          type: string
          example: "10h"
        labelColor:
          type: string
          example: "color should be a hex value ie: #CACACA"
        labelText:
          type: string
          example: "to describe the label, ie color red is urgent"
        parentTaskID:
          type: string
        assignedToID:
          type: array
          example: "an array of user id's who is working on the task"
        createdByID:
          type: string
          example: "user ID of the person, who created the task"

    userModel:
      type: object
      properties:
        username:
          type: string
          example: "MattyxD"
        email:
          type: string
          example: "email of the person creating the account"
        fName:
          type: string
          example: "person's first name"
        lName:
          type: string
          example: "person's last name"
        password:
          type: string
          example: "password for the account"
        color:
          type: string
          example: "a hex value which is autogenerated when the user successfully creates their account"

paths:
  /addNewProject:
    post:
      tags:
        - projects
      summary: Adds a new project to an organization
      description: completed form, adds a new project to the active organization. it contains who is assigned to the project, project name and project boards/states
      requestBody:
        description: reads object information and sends the information to the relevant collections in MongoDB
        content:
          application/json:
            schema:
              type: object
              properties:
                projectName: 
                  type: string
                projectBoards:
                  type: array
                projectMembers: 
                  type: array
                orgID:
                  type: string
      response:
        200:
          description: Project added successfully
        500:
          description: Something went wrong, either with try/catch or thrown errors

  /getSpecificProject:
    get:
      tags:
        - projects
      summary: gets a specific project
      description: returns specific information about a project, when a user double clicks on a project card. it returns states, tasks, users and project information
      responses:
        200:
        description: available Organization
        content:
          application/json:
            schema:
              type: object
              properties:
                projectName:
                  type: string
                projectStateIDs:
                  type: array
                orgID:
                  type: string
                membersInfo:
                  type: array
                statesInfo:
                  type: array
                tasks:
                  type: array
        500:
          description: something went wrong with getting specific project

  /getProjects:
    get:
      tags:
        - projects
      summary: returns projects in an organization
      description: returns information about projects, when a user clicks on an organization. it returns users and some project information
      responses:
        200:
        description: available Organization
        content:
          application/json:
            schema:
              type: object
              properties:
                projectName:
                  type: string
                projectStateIDs:
                  type: array
                orgID:
                  type: string
                membersInfo:
                  type: array
        500:
          description: something went wrong with getting specific project

  /register:
      post:
        tags:
          - users
        summary: Adds a new user to the system
        description: completed form, adds a new user to the system. the user is ready to create new organizations and projects
        requestBody:
          description: reads object information and sends the information to the relevant collections in MongoDB
          content:
            application/json:
              schema:
                type: object
                properties:
                  username: 
                    type: string
                  email:
                    type: string
                  fName: 
                    type: string
                  lName:
                    type: string
                  passowrd:
                    type: string
                  color: 
                    type: string
        response:
          200:
            description: user added successfully
          500:
            description: Something went wrong, either with try/catch or thrown errors

  /:
    get:
      tags:
        - users
      summary: test
      description: test connection
      responses:
        200:
          description: test success
        500:
          description: error message

  
  /findByEmail:
    get:
      tags:
        - users
      summary: find user by email
      description: find and returns a single user, by the email provided
      parameters:
        - name: email
      responses:
        200:
        description: returned user
        500:
          description: error message

  /login:
    get:
      tags:
        - users
      summary: user login request
      parameters:
        - name: email/username
        - name: password
      responses:
        200:
        description: returned user
        500:
          description: error message

  /addNewOrganization:
    post:
      tags:
        - organization
      summary: Adds a new organization
      description: when a user fills the form and sends the request, the function updates the backend with the specified information and creates a new organization, which the user then will be a part of.

      requestBody:
        description: reads parameters from the request body and adds that to the database
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationModel"
        required: true

      response:
        200:
          description: organization has been created successfully
          

  /getOrganizationsFromID:
    get:
      tags:
        - organization
      summary: selects a specific organization based on provided user _id
      description: when a user logs into the system, a list of organizations, which the user is a part of, is returned.
      responses:
        200:
          description: returned Organizations
        500:
          description: a server error occured

  /getSpecificOrg:
    get:
      tags:
        - organization
      summary: returns a specfic organization
      description: when provided with an organization _id, returns information about an organization
      responses:
        200:
          description: available Organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  orgName:
                    type: string
                  createdByID:
                    type: string
                  ownerID:
                    type: string
                  orgMembers:
                    type: array
                  projectIDs:
                    type: array
                  inviteArray:
                    type: array
                  owner:
                    type: array
                  createdByUser:
                    type: array
                  orgUsers:
                    type: array
        500:
          description: a server error occured

  