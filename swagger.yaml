openapi: 3.0.0
info:
  title: MEN REST API
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
    description: Localhost development server
components:
  securitySchemes:
    securitySchemes:
      bearerAuth: # arbitrary name for the security scheme
    type: http
    scheme: bearer
    bearerFormat: JWT

  schemas:
    OrganizationModel:
      type: object
      properties:
        orgName:
          type: string
          example: "Acme Corp"
        createdByID:
          type: string
          example: "MongoDBObjectID"
        ownerID:
          type: string
          example: "MongoDBObjectID"
        orgMembers:
          type: array
          example: '["MongoDBObjectID", "MongoDBObjectID"]'
        projectIDs:
          type: array
          example: '["MongoDBObjectID", "MongoDBObjectID"]'
        inviteArray:
          type: array
          example: '["MongoDBObjectID", "MongoDBObjectID"]'

    ProjectModel:
      type: object
      properties:
        projectName:
          type: string
          example: "Acme Corp Project"
        projectStateIDs:
          type: array
          example: '["MongoDBObjectID", "MongoDBObjectID"]'
        members:
          type: array
          example: '["MongoDBObjectID", "MongoDBObjectID"]'
        orgID:
          type: string
          example: "MongoDBObjectID"

    StateModel:
      type: object
      properties:
        stateName:
          type: string
          exmaple: "Todo"
        position:
          type: number
          example: "0 - where lower position equals what is shown first"

    TaskModel:
      type: object
      properties:
        stateID:
          type: string
          example: "MongoDBObjectID"
        taskTitle:
          type: string
          example: "Create login button design"
        taskDescription:
          type: string
          example: "Create login button design, which fulfills the following criteria: - Responsive, - clear contrast and readable, - follow company design methods"
        hoursExpected:
          type: string
          example: "12h"
        hoursSpent:
          type: string
          example: "10h"
        labelColor:
          type: string
          example: "color should be a hex value ie: #CACACA"
        labelText:
          type: string
          example: "to describe the label, ie color red is urgent"
        parentTaskID:
          type: string
        assignedToID:
          type: array
          example: "an array of user id's who is working on the task"
        createdByID:
          type: string
          example: "user ID of the person, who created the task"
          example: "an array of user id's who is working on the task"
        position:
          type: number
          example: "position for the task, a lower number = higher on the list"

    userModel:
      type: object
      properties:
        username:
          type: string
          example: "MattyxD"
        email:
          type: string
          example: "email of the person creating the account"
        fName:
          type: string
          example: "person's first name"
        lName:
          type: string
          example: "person's last name"
        password:
          type: string
          example: "password for the account"
        color:
          type: string
          example: "a hex value which is autogenerated when the user successfully creates their account"


paths:
  /addNewOrganization:
    post:
      tags:
        - organizations
      summary: Add a new organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationModel"
      responses:
        '200':
          description: Organization created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  org:
                    $ref: "#/components/schemas/OrganizationModel"
        '500':
          description: Something went wrong with adding a new Organization
  /updateOrganization/{orgID}:
    post:
      tags:
        - organizations
      summary: Update organization details
      parameters:
        - in: path
          name: orgID
          required: true
          schema:
            type: string
          description: ID of the organization to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationModel"
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  organization:
                    $ref: "#/components/schemas/OrganizationModel"
        '404':
          description: Organization not found
        '400':
          description: Invalid organization ID
        '500':
          description: Failed to update the organization
  /getOrganizationsFromID:
    get:
      tags:
        - organizations
      summary: Get organizations associated with the user ID
      responses:
        '200':
          description: Organizations found
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: "#/components/schemas/OrganizationModel"
        '500':
          description: Internal Server Error
  /getSpecificOrg/{orgID}:
    get:
      tags:
        - organizations
      summary: Get specific organization details
      parameters:
        - in: path
          name: orgID
          required: true
          schema:
            type: string
          description: ID of the organization to retrieve
      responses:
        '200':
          description: Available Organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  org:
                    $ref: "#/components/schemas/OrganizationModel"
        '500':
          description: Internal Server Error
  /check-user-invites:
    get:
      tags:
        - organizations
      summary: Check invitations for the logged-in user
      responses:
        '200':
          description: Invitations found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    orgName:
                      type: string
                    owner:
                      $ref: "#/components/schemas/userModel"
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /accept-org-inv/{orgID}:
    get:
      tags:
        - organizations
      summary: Accept organization invitation
      parameters:
        - in: path
          name: orgID
          required: true
          schema:
            type: string
          description: ID of the organization invitation to accept
      responses:
        '200':
          description: Invitation accepted
        '401':
          description: Unauthorized
        '404':
          description: Organization not found
        '400':
          description: Invite not found in the organization
        '500':
          description: Internal Server Error
  /decline-org-inv/{orgID}:
    get:
      tags:
        - organizations
      summary: Decline organization invitation
      parameters:
        - in: path
          name: orgID
          required: true
          schema:
            type: string
          description: ID of the organization invitation to decline
      responses:
        '200':
          description: Invitation declined
        '401':
          description: Unauthorized
        '404':
          description: Organization not found
        '400':
          description: Invite not found in the organization
        '500':
          description: Internal Server Error
  /delete-org/{orgID}:
    get:
      tags:
        - organizations
      summary: Delete organization
      parameters:
        - in: path
          name: orgID
          required: true
          schema:
            type: string
          description: ID of the organization to delete
      responses:
        '200':
          description: Organization deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/OrganizationModel"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Organization not found
        '500':
          description: Internal Server Error

  /addNewProject:
    post:
      tags:
        - Projects
      summary: Add a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectName:
                  type: string
                projectMembers:
                  type: array
                  items:
                    type: object
                orgID:
                  type: string
      responses:
        '200':
          description: Project added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  projectID:
                    type: string
        '500':
          description: Something went wrong with adding a new project
  /getSpecificProject/{projectID}:
    get:
      tags:
        - projects
      summary: Get specific project details
      parameters:
        - in: path
          name: projectID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Data retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  Title:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        projectName:
                          type: string
                        projectStateIDs:
                          type: array
                          items:
                            type: string
                        orgID:
                          type: string
                        projectStates:
                          type: array
                          items:
                            type: object
                            properties:
                              stateName:
                                type: string
                              stateID:
                                type: string
                              position:
                                type: integer
                        membersInfo:
                          type: array
                          items:
                            type: object
                            properties:
                              email:
                                type: string
                              fName:
                                type: string
                              lName:
                                type: string
                              color:
                                type: string
        '500':
          description: Server error
  /getProjects/{orgID}:
    get:
      tags:
        - projects
      summary: Get projects associated with the organization ID
      parameters:
        - in: path
          name: orgID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Projects found
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    type: array
                    items:
                      type: object
                      properties:
                        projectName:
                          type: string
                        projectStateIDs:
                          type: array
                          items:
                            type: string
                        orgID:
                          type: string
                        membersInfo:
                          type: array
                          items:
                            type: object
                            properties:
                              email:
                                type: string
                              fName:
                                type: string
                              lName:
                                type: string
                              color:
                                type: string
        '500':
          description: Internal Server Error
  /updateSingleProjectBoard:
    post:
      tags:
        - projects
      summary: Update single project board
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                taskArray:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Board successfully updated
        '500':
          description: Server error
  /getSingleProject:
    post:
      tags:
        - projects
      summary: Get single project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectID:
                  type: string
      responses:
        '200':
          description: Data retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  Title:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        projectName:
                          type: string
                        projectStateIDs:
                          type: array
                          items:
                            type: string
                        orgID:
                          type: string
                        projectStates:
                          type: array
                          items:
                            type: object
                            properties:
                              stateName:
                                type: string
                              stateID:
                                type: string
                              position:
                                type: integer
                        membersInfo:
                          type: array
                          items:
                            type: object
                            properties:
                              email:
                                type: string
                              fName:
                                type: string
                              lName:
                                type: string
                              color:
                                type: string
        '500':
          description: Server error
  /updateProjectData:
    post:
      tags:
        - projects
      summary: Update project data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newProjectName:
                  type: string
                projectID:
                  type: string
                newBoards:
                  type: array
                  items:
                    type: object
                newMembers:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Board successfully updated
        '500':
          description: Server error
  /deleteProject:
    delete:
      tags:
        - projects
      summary: Delete project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectID:
                  type: string
      responses:
        '200':
          description: Deleted project
        '500':
          description: Internal server error
  /updateStatesPos:
    post:
      tags:
        - projects
      summary: Update states position
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  ID:
                    type: string
                  position:
                    type: integer
      responses:
        '200':
          description: States updated successfully
        '500':
          description: Internal server error

  /updateSingleTask:
    post:
      tags:
        - tasks
      summary: Update single task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                taskTitle:
                  type: string
                taskDescription:
                  type: string
                assignedToID:
                  type: string
                labelColor:
                  type: string
                hoursExpected:
                  type: number
                hoursSpent:
                  type: number
      responses:
        '200':
          description: Task updated Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
        '500':
          description: something went wrong with updating task information
  /deleteSingleTask:
    delete:
      tags:
        - tasks
      summary: Delete single task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                taskID:
                  type: string
      responses:
        '200':
          description: Task deleted Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
        '500':
          description: something went wrong when deleting task
  /updateTaskPosition:
    post:
      tags:
        - tasks
      summary: Update task position
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                  position:
                    type: integer
      responses:
        '200':
          description: Task position successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
        '500':
          description: something went wrong when updating task position
  /updateTaskState:
    post:
      tags:
        - tasks
      summary: Update task state
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                taskID:
                  type: string
                newStateID:
                  type: string
      responses:
        '200':
          description: Task state successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
        '500':
          description: something went wrong when updating task state

  /register:
    post:
      tags:
        - user
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                fName:
                  type: string
                lName:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Bad request
        '500':
          description: Internal Server Error

  /update-user:
    post:
      tags:
        - user
      summary: Update user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fName:
                  type: string
                lName:
                  type: string
                color:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal Server Error

  /delete:
    delete:
      tags:
        - user
      summary: Delete user
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /find-user:
    get:
      tags:
        - user
      summary: Find user by ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  fName:
                    type: string
                  lName:
                    type: string
                  color:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal Server Error

  /logout:
    get:
      tags:
        - user
      summary: Logout user
      responses:
        '200':
          description: Logged out successfully

# paths:
#   /addNewProject:
#     post:
#       tags:
#         - projects
#       summary: Adds a new project to an organization
#       description: completed form, adds a new project to the active organization. it contains who is assigned to the project, project name and project boards/states
#       requestBody:
#         description: reads object information and sends the information to the relevant collections in MongoDB
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 projectName: 
#                   type: string
#                 projectBoards:
#                   type: array
#                 projectMembers: 
#                   type: array
#                 orgID:
#                   type: string
#       response:
#         200:
#           description: Project added successfully
#         500:
#           description: Something went wrong, either with try/catch or thrown errors

#   /getSpecificProject:
#     get:
#       tags:
#         - projects
#       summary: gets a specific project
#       description: returns specific information about a project, when a user double clicks on a project card. it returns states, tasks, users and project information
#       responses:
#         200:
#         description: available Organization
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 projectName:
#                   type: string
#                 projectStateIDs:
#                   type: array
#                 orgID:
#                   type: string
#                 membersInfo:
#                   type: array
#                 statesInfo:
#                   type: array
#                 tasks:
#                   type: array
#         500:
#           description: something went wrong with getting specific project

#   /getProjects:
#     get:
#       tags:
#         - projects
#       summary: returns projects in an organization
#       description: returns information about projects, when a user clicks on an organization. it returns users and some project information
#       responses:
#         200:
#         description: available Organization
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 projectName:
#                   type: string
#                 projectStateIDs:
#                   type: array
#                 orgID:
#                   type: string
#                 membersInfo:
#                   type: array
#         500:
#           description: something went wrong with getting specific project

#   /updateSingleProjectBoard:
#     post:
#       tags:
#         -projects
#       summary: Updates a Board/State in a project
#       description: This endpoint is responsible for updating multiple parameters for a Board/State in a project. 
#       requestBody:
#         description: reads object information and sends the information to the relevant collections in MongoDB
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 stateID: 
#                   type: string
#                 stateName:
#                   type: string
#                 taskArray: 
#                   type: array
                
#         response:
#           200:
#             description: returns updated state
#           404:
#             description: State not found
#           500:
#             description: server error

#   /getSingleProject:
#     post:
#       tags:
#         -projects
#       summary: retrieves a single project
#       description: This endpoint is responsible for getting a specific project, but also returns extra information based on the projectID, with the help of aggregation. 
#       requestBody:
#         description: reads object information and sends the information to the relevant collections in MongoDB
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 projectID: 
#                   type: string
                
#         response:
#           200:
#             description: returns updated state
#           404:
#             description: State not found
#           500:
#             description: server error

#   /updateProjectData:
#     post:
#       tags:
#         -projects
#       summary: retrieves a single project
#       description: This endpoint is responsible for updating a specific project, if the user wishes to change the name, add/remove boards, add/remove members. 
#       requestBody:
#         description: reads object information and sends the information to the relevant collections in MongoDB
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 projectID: 
#                   type: string
#               properties:
#                 newProjectName: 
#                   type: string
#               properties:
#                 nowProjectBoards: 
#                   type: array
                
#         response:
#           200:
#             description: Board successfully updated
#           500:
#             description: server error

#   /deleteProject:
#     delete:
#       tags:
#         -projects
#       summary: deletes a single project
#       description: This endpoint is responsible for deleting a specific project, it also deletes tasks, belonging to States (which gets deleted after the tasks), which belongs to the project. 
#       requestBody:
#         description: reads object information and sends the information to the relevant collections in MongoDB
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 projectID: 
#                   type: string
#               properties:
#                 newProjectName: 
#                   type: string
#               properties:
#                 nowProjectBoards: 
#                   type: array
                
#         response:
#           200:
#             description: Board successfully updated
#           404:
#             description: project not found
#           500:
#             description: internal server error

#   /updateStatePos:
#     post:
#       tags:
#         -projects
#       summary: updates a State's Position
#       description: This endpoint is responsible for updating a State's position, after it has been dropped by the user. 
#       requestBody:
#         description: reads object information and sends the information to the relevant collections in MongoDB
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 _id: 
#                   type: string
#               properties:
#                 position: 
#                   type: string
                
#         response:
#           200:
#             description: states updated successfully
#           500:
#             description: internal server error

#   /register:
#       post:
#         tags:
#           - users
#         summary: Adds a new user to the system
#         description: completed form, adds a new user to the system. the user is ready to create new organizations and projects
#         requestBody:
#           description: reads object information and sends the information to the relevant collections in MongoDB
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   username: 
#                     type: string
#                   email:
#                     type: string
#                   fName: 
#                     type: string
#                   lName:
#                     type: string
#                   passowrd:
#                     type: string
#                   color: 
#                     type: string
#         response:
#           200:
#             description: returns user id
#           400:
#             description: resource not found
#           500:
#             description: Something went wrong, either with try/catch or thrown errors

#   /update-user:
#     post:
#       tags:
#         -users
#       summary: updates information about a single user
#       description: This endpoint is responsible for updating user information with the retrieved userID.
#        requestBody:
#           description: reads object information and sends the information to the relevant collections in MongoDB
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   username: 
#                     type: string
#                   email:
#                     type: string
#                   fName: 
#                     type: string
#                   lName:
#                     type: string
#                   passowrd:
#                     type: string
#                   color: 
#                     type: string
#         response:
#           200:
#             description: user updated successfully
#           400:
#             description: user not found
#           401:
#             description: unauthorized
#           500:
#             description: Something went wrong, either with try/catch or thrown errors 

#   /delete:
#     delete:
#       tags:
#         -users
#       summary: deletes a single user
#       description: This endpoint is responsible for deleting a user information with the retrieved userID, it also deletes organizations, where the user is the owner and no suitable users where found.
#        requestBody:
#           description: reads object information and sends the information to the relevant collections in MongoDB
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   userID: 
#                     type: string
#         response:
#           200:
#             description: user deleted successfully
#           401:
#             description: unauthorized
#           500:
#             description: Something went wrong, either with try/catch or thrown errors 



#   /:
#     get:
#       tags:
#         - users
#       summary: test
#       description: test connection
#       responses:
#         200:
#           description: test success
#         500:
#           description: error message

  

#   /login:
#     get:
#       tags:
#         - users
#       summary: user login request
#       parameters:
#         - name: email/username
#         - name: password
#       responses:
#         200:
#         description: returned user
#       500:
#         description: error message


#   /logout:
#     get:
#       tags:
#         - users
#       summary: user logout request
      
#       responses:
#         200:
#         description: logged out

#   /addNewOrganization:
#     post:
#       tags:
#         - organization
#       summary: Adds a new organization
#       description: when a user fills the form and sends the request, the function updates the backend with the specified information and creates a new organization, which the user then will be a part of.

#       requestBody:
#         description: reads parameters from the request body and adds that to the database
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/OrganizationModel"
#         required: true

#       response:
#         200:
#           description: organization has been created successfully
          

#   /getOrganizationsFromID:
#     get:
#       tags:
#         - organization
#       summary: selects a specific organization based on provided user _id
#       description: when a user logs into the system, a list of organizations, which the user is a part of, is returned.
#       responses:
#         200:
#           description: returned Organizations
#         500:
#           description: a server error occured

#   /getSpecificOrg:
#     get:
#       tags:
#         - organization
#       summary: returns a specfic organization
#       description: when provided with an organization _id, returns information about an organization
#       responses:
#         200:
#           description: available Organization
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   _id:
#                     type: string
#                   orgName:
#                     type: string
#                   createdByID:
#                     type: string
#                   ownerID:
#                     type: string
#                   orgMembers:
#                     type: array
#                   projectIDs:
#                     type: array
#                   inviteArray:
#                     type: array
#                   owner:
#                     type: array
#                   createdByUser:
#                     type: array
#                   orgUsers:
#                     type: array
#         500:
#           description: a server error occured

#   /udateOrganization:
#     post:
#       tags:
#         - organization
#       summary: updates an organization
#       description: This endpoint is responsible for updating an organization, it will update organization name, add/remove users, invited users.
#       params:
#         orgID:
#           type: string
#       requestBody:
#         description: reads object information and sends the information to the relevant collections in MongoDB
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 data: 
#                   type: object

#       response:
#         200:
#           description: organization has been updated successfully
#         400:
#           description: invalid organization id
#         404:
#           description: organization not found
#         500:
#           description: internal server error


#   /check-user-invites
#     get:
#       tags:
#         - organization
#       summary: checks if the user has invites to an organization
#       description: returns any invites that the user has, for joining new organizations. happens upon logging in
#       paramaters:
#         - name: auth-token
#       response:
#         200:
#         description: available invitations
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 id:
#                   type: string
#                 orgName:
#                   type: string
#                 owner:
#                   type: object
#         500:
#           description: internal server error

#   /accept-org-inv
#     get:
#       tags:
#         - organization
#       summary: accepts organization invitation
#       description: this endpoint is responsible for accepting a users invite to an organization
#       paramaters:
#         - name: auth-token
#         - name: orgID
#       response:
#         200:
#         description: available invitations
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 id:
#                   type: string
#                 orgName:
#                   type: string
#                 owner:
#                   type: object
#         401:
#           description: unauthorized
#         500:
#           description: internal server error
